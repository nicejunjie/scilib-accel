#include "myblas.h"

#ifdef DBI
#define _DGEMV mydgemv
#else 
#define _DGEMV dgemv_
#endif 

void _DGEMV(const char *trans, const int *m, const int *n, const double *alpha, const double *A,
            const int *lda, const double *x, const int *incx, const double *beta, double *y, const int *incy) {

    enum findex fi = dgemv; 
    static void (*orig_f)() = NULL; 
    double t0=0.0, t1=0.0;

    DEBUG1(t0 -= scilib_second());

    double avgn = sqrt((double)*m * (double)*n);

    int size_type = sizeof(double);
    size_t sizeA = (*m) * (*lda);
    size_t sizeX = (*n) * abs(*incx);
    size_t sizeY = (*m) * abs(*incy);
    sizeA *= size_type;
    sizeX *= size_type;
    sizeY *= size_type;

    double matrix_mem_size_mb = ((double)sizeA + (double)sizeX + (double)sizeY) / 1024.0 / 1024.0;
    double beta_abs = fabs(*beta);

        DEBUG2(fprintf(stderr,"xpu: dgemv args: trans=%c, m=%d, n=%d, alpha=%.1e, lda=%d, incx=%d, beta=%.1e, incy=%d\n",
            *trans, *m, *n, *alpha, *lda, *incx, *beta, *incy));

        if (!orig_f) orig_f = scilib_farray[fi].fptr;




    cublasOperation_t gpu_trans = (*trans == 'N' || *trans == 'n') ? CUBLAS_OP_N : CUBLAS_OP_T;

        int inumaA, inumaX, inumaY;
            inumaA = which_numa(A, sizeA);
            inumaX = which_numa(x, sizeX);
            inumaY = which_numa(y, sizeY);
//           DEBUG1(fprintf(stderr,"a,NUMA location of A,x,y: %d %d %d\n", inumaA, inumaX, inumaY));

        if(inumaA == 0)  
          orig_f(trans, m, n, alpha, A, lda, x, incx, beta, y, incy);
        else {
          CUBLAS_CHECK(cublasDgemv(handle, gpu_trans, *m, *n, alpha, A, *lda, x, *incx, beta, y, *incy));
          CUDA_CHECK(cudaDeviceSynchronize());
       }


    return;
}
